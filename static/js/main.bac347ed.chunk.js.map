{"version":3,"sources":["api/axios.ts","api/hotels/endpoints.ts","api/hotels/index.ts","pages/Page1/Page1.tsx","pages/Page2/Page2.tsx","pages/Page3/Page3.tsx","App.tsx","state/actions/types.ts","reportWebVitals.ts","state/reducers/hotelsReducer.ts","state/reducers/productsReducer.ts","state/sagas/hotels.ts","state/sagas/index.ts","state/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","interceptors","request","use","req","token","localStorage","getItem","headers","Authorization","response","res","err","a","status","window","location","replace","console","log","Promise","reject","getHotels","Axios","get","postHotel","hotel","post","Page1","style","backgroundColor","width","height","fontSize","color","process","Page2","Page3","App","HotelsType","className","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_PRODUCTS","initialState","loading","items","maxPage","itemsCount","total","products","id","name","loadHotels","watchLoadHotels","addHotels","watchAddHotels","call","put","type","ADD_HOTEL_SUCCESS","payload","data","takeLatest","GET_ALL_REQUEST","objectId","ADD_HOTEL_REQUEST","all","hotelSaga","rootReducer","combineReducers","state","action","Types","hotels","GET_ALL_SUCCESS","GET_ALL_FAIL","ADD_HOTEL_FAIL","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bac347ed.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://192.168.0.148:3000'\n});\n\ninstance.interceptors.request.use(req => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    req.headers = {\n      Authorization: `Bearer ${token}`\n    };\n  }\n  return req;\n});\n\ninstance.interceptors.response.use(\n  res => {\n    return res;\n  },\n  async err => {\n    const refresh = localStorage.getItem('refresh_token');\n    if (refresh) {\n      // await refreshToken();\n      // instance(err.config);\n    } else if (err.response.status === 401) {\n      window.location.replace('/login');\n    }\n    console.log(err.response);\n    return Promise.reject(err);\n  }\n);\n\nexport default {\n  instance\n};\n","import Axios from '../axios';\nimport { GetHotelsResponse, Hotel, PostHotelResponse } from './types';\n\nexport const getHotels = (): Promise<GetHotelsResponse> => {\n  return Axios.instance.get('/hotel');\n};\n\nexport const postHotel = (hotel: Hotel): Promise<PostHotelResponse> => {\n  return Axios.instance.post('/hotel', hotel);\n};\n","export * from './endpoints';\nexport * from './types';\n","import React from 'react';\n\nconst Page1 = () => {\n  return (\n    <div style={{ backgroundColor: 'red', width: '100vw', height: '100vh', fontSize: 40, color: '#fff' }}>\n      Page 1<p>{process.env.REACT_APP_TEST_KEY}</p>\n    </div>\n  );\n};\n\nexport default Page1;\n","import React from 'react';\n\nconst Page2 = () => {\n  return (\n    <div style={{ backgroundColor: 'blue', width: '100vw', height: '100vh', fontSize: 40, color: '#fff' }}>\n      Page2\n      <p>{process.env.REACT_APP_TEST_KEY}</p>\n    </div>\n  );\n};\n\nexport default Page2;\n","import React from 'react';\n\nconst Page3 = () => {\n  return (\n    <div style={{ backgroundColor: 'green', width: '100vw', height: '100vh', fontSize: 40, color: '#fff' }}>\n      Page3\n      <p>{process.env.REACT_APP_TEST_KEY}</p>\n    </div>\n  );\n};\n\nexport default Page3;\n","import React from 'react';\nimport './App.scss';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport Page1 from './pages/Page1/Page1';\nimport Page2 from './pages/Page2/Page2';\nimport Page3 from './pages/Page3/Page3';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <nav>\n        <Link to='/page1'>Page1</Link>\n        <Link to='/page2'>Page2</Link>\n        <Link to='/page3'>Page3</Link>\n      </nav>\n      <main>\n        <Switch>\n          <Route exact path='/page1'>\n            <Page1 />\n          </Route>\n          <Route exact path='/page2'>\n            <Page2 />\n          </Route>\n          <Route exact path='/page3'>\n            <Page3 />\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","export const ADD_PRODUCTS = 'ADD_PRODUCTS';\n\nexport enum HotelsType {\n  GET_ALL_REQUEST = 'GET_ALL_REQUEST',\n  GET_ALL_SUCCESS = 'GET_ALL_SUCCESS',\n  GET_ALL_FAIL = 'GET_ALL_FAIL',\n\n  ADD_HOTEL_REQUEST = 'ADD_HOTEL_REQUEST',\n  ADD_HOTEL_SUCCESS = 'ADD_HOTEL_SUCCESS',\n  ADD_HOTEL_FAIL = 'ADD_HOTEL_FAIL'\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { HotelsType } from '../actions/types';\n\nconst initialState = {\n  loading: false,\n  items: [],\n  maxPage: null,\n  itemsCount: 0,\n  total: 0\n};\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case HotelsType.GET_ALL_REQUEST: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n\n    case HotelsType.GET_ALL_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        items: action.payload.items,\n        total: action.payload.total,\n        itemsCount: action.payload.itemsCount\n      };\n    }\n\n    case HotelsType.GET_ALL_FAIL: {\n      return {\n        ...state,\n        loading: false\n      };\n    }\n\n    case HotelsType.ADD_HOTEL_REQUEST: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n\n    case HotelsType.ADD_HOTEL_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        items: [...state.items, action.payload],\n        itemsCount: state.itemsCount + 1,\n        total: state.total + 1\n      };\n    }\n\n    case HotelsType.ADD_HOTEL_FAIL: {\n      return {\n        ...state,\n        loading: false\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import * as Types from '../actions/types';\n\nconst initialState = {\n  products: [\n    {\n      id: 1,\n      name: 'apple'\n    }\n  ]\n};\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case Types.ADD_PRODUCTS: {\n      return {\n        ...state,\n        products: [...state.products, action.payload]\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { postHotel } from './../../api/hotels/endpoints';\nimport { call, put, takeLatest } from '@redux-saga/core/effects';\nimport { all } from 'redux-saga/effects';\nimport { getHotels } from '../../api/hotels';\nimport { HotelsType } from '../actions/types';\n\nimport * as actions from '../actions/hotels';\n\nfunction* loadHotels(): Generator {\n  try {\n    // @ts-ignore\n    const response: any = yield call(getHotels);\n    console.log(response);\n    put({\n      type: HotelsType.ADD_HOTEL_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {}\n}\n\nfunction* watchLoadHotels() {\n  yield takeLatest(HotelsType.GET_ALL_REQUEST, loadHotels);\n}\n\nfunction* addHotels({ payload }: any): Generator {\n  try {\n    // @ts-ignore\n    const response: any = yield call(postHotel, payload);\n    console.log(response);\n    put({\n      type: HotelsType.ADD_HOTEL_SUCCESS,\n      payload: {\n        ...payload,\n        id: response.data.objectId\n      }\n    });\n  } catch (err) {}\n}\n\nfunction* watchAddHotels() {\n  yield takeLatest(HotelsType.ADD_HOTEL_REQUEST, addHotels);\n}\n\nexport default function* () {\n  yield all([watchLoadHotels(), watchAddHotels()]);\n}\n","import { all } from 'redux-saga/effects';\n\nimport hotelSaga from './hotels';\n\nexport default function* () {\n  yield all([hotelSaga()]);\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\n// import thunk from 'redux-thunk';\nimport hotelsReducer from './reducers/hotelsReducer';\nimport ProductsReducer from './reducers/productsReducer';\n\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootSaga from './sagas';\n\nconst rootReducer = combineReducers({\n  products: ProductsReducer,\n  hotels: hotelsReducer\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './state/store';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}